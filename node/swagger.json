{
  "swagger": "2.0",
  "info": {
    "description": "Simple api for Clients and Providers management.",
    "version": "1.0.0",
    "title": "Client Manager",
    "contact": {
      "email": "jeffersoncity95@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Clients",
      "description": "API for clients management"
    },
    {
      "name": "Providers",
      "description": "API for providers management"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/clients": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Fetch all the clients",
        "operationId": "getClients",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Clients successfully fetched"
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Add a new client to the system",
        "operationId": "createClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Client object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client successfully created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Find a client by id",
        "description": "Returns a single client",
        "operationId": "getClient",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a client to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Client is found",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "404": {
            "description": "Client not found"
          }
        }
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update a client",
        "description": "",
        "operationId": "updateClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a client to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Client object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client successfully updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Client not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete a client",
        "description": "",
        "operationId": "deleteClient",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Client successfully deleted"
          },
          "404": {
            "description": "Client not found"
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Fetch all the providers",
        "operationId": "getProviders",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Providers successfully fetched"
          }
        }
      },
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Add a new provider to the system",
        "operationId": "createProvider",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provider object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider successfully created"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/providers/{id}": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Find a provider by id",
        "description": "Returns a single provider",
        "operationId": "getProvider",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a provider to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider is found",
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          },
          "404": {
            "description": "Provider not found"
          }
        }
      },
      "put": {
        "tags": [
          "Providers"
        ],
        "summary": "Update a provider",
        "operationId": "updateProvider",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a provider to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provider object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider successfully updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Providers"
        ],
        "summary": "Delete a provider",
        "description": "",
        "operationId": "deleteProvider",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Provider id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider successfully deleted"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Client": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Provider": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    }
  }
}